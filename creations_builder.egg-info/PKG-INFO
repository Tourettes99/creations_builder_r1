Metadata-Version: 2.4
Name: creations-builder
Version: 1.0.0
Summary: Visual programming interface for creating R1 creations using Blockly
Author-email: R1 Creations Builder <dev@example.com>
License: MIT
Project-URL: Homepage, https://github.com/r1-creations/creations-builder
Project-URL: Repository, https://github.com/r1-creations/creations-builder.git
Project-URL: Documentation, https://github.com/r1-creations/creations-builder#readme
Project-URL: Bug Reports, https://github.com/r1-creations/creations-builder/issues
Keywords: r1,creations,blockly,visual-programming,drag-and-drop
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: End Users/Desktop
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development :: Code Generators
Classifier: Topic :: Software Development :: User Interfaces
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: flask>=2.0.0
Requires-Dist: flask-cors>=3.0.0
Requires-Dist: jinja2>=3.0.0
Requires-Dist: click>=8.0.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"

# R1 Creations Builder

A visual programming interface for creating R1 creations using drag-and-drop blocks. Build interactive applications for the R1 device without writing code!

![Creations Builder](https://via.placeholder.com/800x400?text=R1+Creations+Builder+Interface)

## Features

- 🎯 **Visual Programming**: Drag-and-drop interface using Google Blockly
- 🎤 **Voice Commands**: Create voice-activated triggers
- ⏰ **Timer Events**: Set up time-based automation
- 🔧 **Hardware Integration**: Use R1's buttons, scroll wheel, and accelerometer
- 📱 **Device APIs**: Access storage, sensors, and communication features
- 📤 **Multiple Export Formats**: HTML bundles, JSON data, and XML workspaces
- 🎨 **Starter Templates**: Pre-built examples to get you started
- 👀 **Live Preview**: Test your creations in a simulated R1 environment
- 💾 **Auto-save**: Never lose your work with automatic saving
- 🌙 **Dark Mode**: Comfortable interface for any lighting

## Quick Start

### Installation

```bash
pip install creations-builder
```

### Launch the Builder

```bash
creations-builder
```

This will start the web interface at `http://localhost:5000` and automatically open your browser.

### Command Line Options

```bash
creations-builder --help
```

- `--host`: Host to bind to (default: 127.0.0.1)
- `--port`: Port to bind to (default: 5000)
- `--debug`: Enable debug mode
- `--no-browser`: Don't open browser automatically

## Building Your First Creation

1. **Start with a Template**: Click "Templates" and choose "Hello World"
2. **Drag Blocks**: Add triggers (voice commands, timers) and actions (speak, notify)
3. **Connect Logic**: Snap blocks together to create your program flow
4. **Preview**: Click "Preview" to test in the R1 simulator
5. **Export**: Click "Export" → "HTML Bundle" to get your R1 creation file

## Block Categories

### 🎯 Triggers
- **Voice Command**: Respond to spoken phrases
- **Timer**: Execute at regular intervals
- **Hardware Button**: React to device buttons
- **Accelerometer**: Detect device movement and tilt

### ⚡ Actions
- **Send Notification**: Display messages
- **Speak Text**: Use R1's voice synthesis
- **Web Request**: Make HTTP calls to APIs
- **Store Data**: Save information to device storage

### 🧠 Logic
- **Wait**: Pause execution
- **If/Else**: Conditional logic
- **Math**: Calculations and comparisons
- **Text**: String manipulation
- **Variables**: Store and retrieve values

## R1 Device APIs

The builder generates code that uses the R1 Creations SDK:

### Hardware Events
```javascript
// Scroll wheel
window.addEventListener('scrollUp', handler);
window.addEventListener('scrollDown', handler);

// Side button (PTT)
window.addEventListener('sideClick', handler);
window.addEventListener('longPressStart', handler);
```

### Sensors
```javascript
// Accelerometer
window.creationSensors.accelerometer.start(callback, options);
```

### Storage
```javascript
// Plain storage
await window.creationStorage.plain.setItem(key, value);

// Secure storage
await window.creationStorage.secure.setItem(key, value);
```

### Communication
```javascript
// Send messages to R1
PluginMessageHandler.postMessage(JSON.stringify({
  message: "Hello R1!",
  useLLM: true,
  wantsR1Response: true
}));
```

## Export Formats

### HTML Bundle
Complete HTML file ready to deploy on R1 device. Includes all necessary code and styling optimized for the 240x282px screen.

### JSON Data
Structured format containing:
- Creation metadata
- Blockly workspace XML
- Generated JavaScript code
- Timestamps and version info

### XML Workspace
Pure Blockly workspace format for sharing and backup. Can be imported back into the builder.

## Templates

### Beginner
- **Hello World**: Basic voice response
- **Timer Reminder**: Simple notifications

### Productivity
- **Task Scheduler**: Time-based reminders
- **Voice Notes**: Record and playback

### Sensors
- **Tilt Controller**: Motion-based controls
- **Step Counter**: Movement tracking

### Advanced
- **Weather Station**: API integration
- **Home Automation**: IoT device control

## Development

### Project Structure
```
creations_builder/
├── creations_builder/          # Python package
│   ├── app.py                  # Flask application
│   ├── cli.py                  # Command-line interface
│   ├── blocks/                 # Custom block definitions
│   └── api/                    # API endpoints
├── static/                     # Frontend assets
│   ├── js/                     # JavaScript files
│   ├── css/                    # Stylesheets
│   └── blockly/               # Blockly library
├── templates/                  # HTML templates
│   ├── index.html             # Main interface
│   └── exports/               # Export templates
└── docs/                      # Documentation
```

### Adding Custom Blocks

1. **Define Block Structure** in `creations_builder/blocks/registry.py`:
```python
self.register_block('actions', 'my_block', {
    'type': 'my_block',
    'message0': 'do something with %1',
    'args0': [{'type': 'field_input', 'name': 'VALUE'}],
    'colour': 230,
    'tooltip': 'Does something useful'
})
```

2. **Add Code Generator** in `static/js/custom-blocks.js`:
```javascript
Blockly.JavaScript['my_block'] = function(block) {
    const value = block.getFieldValue('VALUE');
    return `console.log('${value}');\n`;
};
```

3. **Update Toolbox** in `static/js/blockly-config.js`:
```javascript
{
    kind: 'block',
    type: 'my_block'
}
```

### API Endpoints

- `GET /api/blocks` - Get all available blocks
- `GET /api/templates/list` - List starter templates
- `GET /api/templates/{id}` - Get specific template
- `POST /api/export/html` - Export as HTML bundle
- `POST /api/export/json` - Export as JSON data
- `POST /api/export/xml` - Export as XML workspace

### Running in Development

```bash
git clone <repository>
cd creations_builder
pip install -e .
creations-builder --debug
```

## Browser Compatibility

- Chrome 80+
- Firefox 75+
- Safari 13+
- Edge 80+

## R1 Device Requirements

- R1 firmware version 2.0+
- Creations SDK enabled
- 240x282px display support

## Troubleshooting

### Blockly Not Loading
- Check browser console for errors
- Ensure JavaScript is enabled
- Try refreshing the page

### Export Failures
- Verify workspace has blocks
- Check network connection
- Try a different export format

### Preview Not Working
- Ensure popup blocker is disabled
- Check browser security settings
- Try using Chrome or Firefox

### R1 Device Issues
- Verify creation file format
- Check R1 firmware version
- Ensure SDK APIs are available

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests if applicable
5. Submit a pull request

### Development Setup

```bash
# Clone repository
git clone <repository>
cd creations_builder

# Install in development mode
pip install -e .[dev]

# Run tests
pytest

# Format code
black .

# Check types
mypy creations_builder/
```

## License

MIT License - see LICENSE file for details.

## Support

- 📖 **Documentation**: [GitHub Wiki](https://github.com/r1-creations/creations-builder/wiki)
- 🐛 **Bug Reports**: [GitHub Issues](https://github.com/r1-creations/creations-builder/issues)
- 💬 **Discussions**: [GitHub Discussions](https://github.com/r1-creations/creations-builder/discussions)
- 📧 **Email**: dev@example.com

## Acknowledgments

- Google Blockly team for the visual programming framework
- R1 device creators for the hardware platform
- Open source community for tools and libraries

---

**Happy Creating!** 🎉 Build amazing R1 creations with visual programming!
